<?xml version="1.0" encoding="UTF-8"?>
<com.egen.tool.business.BusinessComponent>
<class>com.egen.tool.business.BusinessComponent</class>
<businessComponentMasterTemplate>EntityCrudDAOTemplate</businessComponentMasterTemplate>
<businessComponentModule>persistence/entity</businessComponentModule>
<businessComponentName>AlunoDAO</businessComponentName>
<businessComponentAlias>AlunoDAO</businessComponentAlias>
<variables>
<variables_item>
<class>com.egen.tool.business.BusinessVariable</class>
<businessVariableName>aluno</businessVariableName>
<businessVariableType>@entity(controledenotas.domain.entity.Aluno)</businessVariableType>
<variableComponentType></variableComponentType>
<businessVariableDomainReference></businessVariableDomainReference>
<businessVariableInitialization></businessVariableInitialization>
<businessVariableDescription></businessVariableDescription>
<businessVariableSetProperties>
</businessVariableSetProperties>
</variables_item>
</variables>
<businessComponentSetProperties>
</businessComponentSetProperties>
<inputParameters>
</inputParameters>
<businessCodeUnits>
<businessCodeUnits_item>
<class>com.egen.tool.business.BusinessCodeUnit</class>
<businessCodeUnitIdentification>DAO</businessCodeUnitIdentification>
<businessCodeUnitContent>package controledenotas.persistence.entity;

import java.util.*;
import javax.inject.Inject;
import javax.persistence.*;

import br.gov.frameworkdemoiselle.stereotype.PersistenceController;

import controledenotas.domain.entity.Aluno;
import br.gov.frameworkdemoiselle.template.JPACrud;
import javax.persistence.criteria.*;

@PersistenceController
public class AlunoDAO extends JPACrud<Aluno, Integer> {

	private static final long serialVersionUID = 1L;

	@Override
	public List<Aluno> findByExample(Aluno example) {
		if (example == null) {
			example = new Aluno();
		}
		return super.findByExample(example);
	}

	public List<Aluno> findByCriteria(java.util.Map<String, Object> parameters) {
		if (parameters == null) {
			parameters = new java.util.HashMap<String, Object>();
		}
		CriteriaBuilder cb = super.getCriteriaBuilder();
		CriteriaQuery<Aluno> q = cb.createQuery(Aluno.class);
		Root<Aluno> r = q.from(Aluno.class);
		Predicate where = null;
		Object parameter = null; 
		parameter = parameters.get("matricula");
		if (parameter != null) {
			Predicate expression = null;
			if (parameter instanceof java.util.List<?>) {
				@SuppressWarnings("unchecked")
				List<Integer> collection = (List<Integer>)parameter;
				expression = r.get("matricula").in(collection);
			} else if (parameter instanceof Integer) {
				expression = cb.equal(r.get("matricula"), parameter);
			}
			if (expression != null) {
				where = expression;
			}
		}
		parameter = parameters.get("nome");
		if (parameter != null) {
			Predicate expression = null;
			if (parameter instanceof java.util.List<?>) {
				@SuppressWarnings("unchecked")
				List<String> collection = (List<String>)parameter;
				expression = r.get("nome").in(collection);
			} else if (parameter instanceof String && ((String)parameter).length()>0) {
				expression = cb.like(r.<String>get("nome"), "%" + parameter + "%");
			}
			if (expression != null) {
				if (where == null) {
					where = expression;
				} else {
					where = cb.and(where, expression);
				}
			}
		}
		parameter = parameters.get("senha");
		if (parameter != null) {
			Predicate expression = null;
			if (parameter instanceof java.util.List<?>) {
				@SuppressWarnings("unchecked")
				List<String> collection = (List<String>)parameter;
				expression = r.get("senha").in(collection);
			} else if (parameter instanceof String && ((String)parameter).length()>0) {
				expression = cb.like(r.<String>get("senha"), "%" + parameter + "%");
			}
			if (expression != null) {
				if (where == null) {
					where = expression;
				} else {
					where = cb.and(where, expression);
				}
			}
		}
		List<Aluno> results = new ArrayList<Aluno>();
		if (where != null) {
			q.where(where);
			results =  getEntityManager().createQuery(q).getResultList();
		}
		return results;
	}

}

</businessCodeUnitContent>
<businessCodeUnitTemplate>EntityDAOUnit</businessCodeUnitTemplate>
<businessCodeBlocks>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>PackageBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>package controledenotas.persistence.entity;

</businessCodeBlockContent>
<businessCodeBlockIdentification>package</businessCodeBlockIdentification>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
<intraCodeBlocks>
</intraCodeBlocks>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>EntityDAOImportBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>import java.util.*;
import javax.inject.Inject;
import javax.persistence.*;

import br.gov.frameworkdemoiselle.stereotype.PersistenceController;

import controledenotas.domain.entity.Aluno;
import br.gov.frameworkdemoiselle.template.JPACrud;
import javax.persistence.criteria.*;

</businessCodeBlockContent>
<businessCodeBlockIdentification>import</businessCodeBlockIdentification>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
<intraCodeBlocks>
<intraCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate></businessCodeBlockTemplate>
<businessCodeBlockContent>import br.gov.frameworkdemoiselle.template.JPACrud;</businessCodeBlockContent>
<businessCodeBlockIdentification>extraImport</businessCodeBlockIdentification>
<businessCodeBlockSetProperty>
<businessCodeBlockSetProperty_item>
<class>com.egen.tool.business.BusinessComponentSetProperty</class>
<setPropertyEnumeration></setPropertyEnumeration>
<setPropertyKey>position</setPropertyKey>
<setPropertyValue>custom</setPropertyValue>
</businessCodeBlockSetProperty_item>
</businessCodeBlockSetProperty>
<intraCodeBlocks>
</intraCodeBlocks>
</intraCodeBlocks_item>
<intraCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate></businessCodeBlockTemplate>
<businessCodeBlockContent>import javax.persistence.criteria.*;
</businessCodeBlockContent>
<businessCodeBlockIdentification>extraImport_1</businessCodeBlockIdentification>
<businessCodeBlockSetProperty>
<businessCodeBlockSetProperty_item>
<class>com.egen.tool.business.BusinessComponentSetProperty</class>
<setPropertyEnumeration></setPropertyEnumeration>
<setPropertyKey>position</setPropertyKey>
<setPropertyValue>custom</setPropertyValue>
</businessCodeBlockSetProperty_item>
</businessCodeBlockSetProperty>
<intraCodeBlocks>
</intraCodeBlocks>
</intraCodeBlocks_item>
</intraCodeBlocks>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>EntityDAOClassDefinitionBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>@PersistenceController
public class AlunoDAO extends JPACrud<Aluno, Integer> {

	private static final long serialVersionUID = 1L;

</businessCodeBlockContent>
<businessCodeBlockIdentification>declaration</businessCodeBlockIdentification>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
<intraCodeBlocks>
<intraCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>SerialVersionUIDBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>	private static final long serialVersionUID = 1L;

</businessCodeBlockContent>
<businessCodeBlockIdentification>serialVersionUID</businessCodeBlockIdentification>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
<intraCodeBlocks>
</intraCodeBlocks>
</intraCodeBlocks_item>
</intraCodeBlocks>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>EntityDAOFindByExampleBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>	@Override
	public List<Aluno> findByExample(Aluno example) {
		if (example == null) {
			example = new Aluno();
		}
		return super.findByExample(example);
	}

</businessCodeBlockContent>
<businessCodeBlockIdentification>findByExample</businessCodeBlockIdentification>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
<intraCodeBlocks>
</intraCodeBlocks>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>EntityDAOFindByCriteriaBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>	public List<Aluno> findByCriteria(java.util.Map<String, Object> parameters) {
		if (parameters == null) {
			parameters = new java.util.HashMap<String, Object>();
		}
		CriteriaBuilder cb = super.getCriteriaBuilder();
		CriteriaQuery<Aluno> q = cb.createQuery(Aluno.class);
		Root<Aluno> r = q.from(Aluno.class);
		Predicate where = null;
		Object parameter = null; 
		parameter = parameters.get("matricula");
		if (parameter != null) {
			Predicate expression = null;
			if (parameter instanceof java.util.List<?>) {
				@SuppressWarnings("unchecked")
				List<Integer> collection = (List<Integer>)parameter;
				expression = r.get("matricula").in(collection);
			} else if (parameter instanceof Integer) {
				expression = cb.equal(r.get("matricula"), parameter);
			}
			if (expression != null) {
				where = expression;
			}
		}
		parameter = parameters.get("nome");
		if (parameter != null) {
			Predicate expression = null;
			if (parameter instanceof java.util.List<?>) {
				@SuppressWarnings("unchecked")
				List<String> collection = (List<String>)parameter;
				expression = r.get("nome").in(collection);
			} else if (parameter instanceof String && ((String)parameter).length()>0) {
				expression = cb.like(r.<String>get("nome"), "%" + parameter + "%");
			}
			if (expression != null) {
				if (where == null) {
					where = expression;
				} else {
					where = cb.and(where, expression);
				}
			}
		}
		parameter = parameters.get("senha");
		if (parameter != null) {
			Predicate expression = null;
			if (parameter instanceof java.util.List<?>) {
				@SuppressWarnings("unchecked")
				List<String> collection = (List<String>)parameter;
				expression = r.get("senha").in(collection);
			} else if (parameter instanceof String && ((String)parameter).length()>0) {
				expression = cb.like(r.<String>get("senha"), "%" + parameter + "%");
			}
			if (expression != null) {
				if (where == null) {
					where = expression;
				} else {
					where = cb.and(where, expression);
				}
			}
		}
		List<Aluno> results = new ArrayList<Aluno>();
		if (where != null) {
			q.where(where);
			results =  getEntityManager().createQuery(q).getResultList();
		}
		return results;
	}
</businessCodeBlockContent>
<businessCodeBlockIdentification>findByCriteria</businessCodeBlockIdentification>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
<intraCodeBlocks>
</intraCodeBlocks>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>ClosingCodeBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>}</businessCodeBlockContent>
<businessCodeBlockIdentification>closing</businessCodeBlockIdentification>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
<intraCodeBlocks>
</intraCodeBlocks>
</businessCodeBlocks_item>
</businessCodeBlocks>
<businessCodeUnitSetProperty>
<businessCodeUnitSetProperty_item>
<class>com.egen.tool.business.BusinessComponentSetProperty</class>
<setPropertyEnumeration></setPropertyEnumeration>
<setPropertyKey>extends</setPropertyKey>
<setPropertyValue>br.gov.frameworkdemoiselle.template.JPACrud<[ENTITY], [ID_TYPE]></setPropertyValue>
</businessCodeUnitSetProperty_item>
<businessCodeUnitSetProperty_item>
<class>com.egen.tool.business.BusinessComponentSetProperty</class>
<setPropertyEnumeration></setPropertyEnumeration>
<setPropertyKey>file</setPropertyKey>
<setPropertyValue>src/main/java/controledenotas/persistence/entity/AlunoDAO.java</setPropertyValue>
</businessCodeUnitSetProperty_item>
</businessCodeUnitSetProperty>
</businessCodeUnits_item>
<businessCodeUnits_item>
<class>com.egen.tool.business.BusinessCodeUnit</class>
<businessCodeUnitIdentification>DAOTest</businessCodeUnitIdentification>
<businessCodeUnitContent>package controledenotas.persistence.entity;

import controledenotas.domain.entity.*;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import java.util.*;
import javax.inject.Inject;
import org.junit.*;
import org.junit.runner.RunWith;
import br.gov.frameworkdemoiselle.junit.DemoiselleRunner;

@RunWith(DemoiselleRunner.class)
public class AlunoDAOTest {

	@Inject
	private AlunoDAO alunoDAO;

	@Before
	public void before() {
		for (Aluno aluno : alunoDAO.findAll()) {
		alunoDAO.delete(aluno.getMatricula());
		}
	}

	@After
	public void after() {
		before();
	}

	@Test
	public void insert() {
		Aluno aluno = new Aluno();
		aluno.setNome("XXXXXXXXXXXXXXXXXXXX");
		aluno.setSenha("XXXXXXXXXXXXXXXXXXXX");
		alunoDAO.insert(aluno);
		List<Aluno> alunoList = alunoDAO.findAll();
		assertNotNull(alunoList);
		assertEquals(1, alunoList.size());
	}

	@Test
	public void update() {
		Aluno aluno = new Aluno();
		aluno.setNome("XXXXXXXXXXXXXXXXXXXX");
		aluno.setSenha("XXXXXXXXXXXXXXXXXXXX");
		alunoDAO.insert(aluno);
		List<Aluno> alunoList = alunoDAO.findAll();
		assertNotNull(alunoList);
		assertTrue(alunoList.size()>0);
		Aluno beforeUpdate = alunoList.get(0);
		assertEquals("XXXXXXXXXXXXXXXXXXXX", beforeUpdate.getSenha());
		beforeUpdate.setSenha("YYYYYYYYYYYYYYYYYYYY");
		alunoDAO.update(beforeUpdate);
		alunoList = alunoDAO.findAll();
		Aluno afterUpdate = alunoList.get(0);
		assertEquals("YYYYYYYYYYYYYYYYYYYY", afterUpdate.getSenha());
	}

	@Test
	public void delete() {
		Aluno aluno = new Aluno();
		aluno.setNome("XXXXXXXXXXXXXXXXXXXX");
		aluno.setSenha("XXXXXXXXXXXXXXXXXXXX");
		alunoDAO.insert(aluno);
		List<Aluno> alunoList = alunoDAO.findAll();
		assertNotNull(alunoList);
		assertEquals(1, alunoList.size());
		alunoDAO.delete(aluno.getMatricula());
		alunoList = alunoDAO.findAll();
		assertEquals(0, alunoList.size());
	}

}

</businessCodeUnitContent>
<businessCodeUnitTemplate>EntityDAOTestUnit</businessCodeUnitTemplate>
<businessCodeBlocks>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>PackageBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>package controledenotas.persistence.entity;

</businessCodeBlockContent>
<businessCodeBlockIdentification>package</businessCodeBlockIdentification>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
<intraCodeBlocks>
</intraCodeBlocks>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>EntityDAOTestImportBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>import controledenotas.domain.entity.*;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import java.util.*;
import javax.inject.Inject;
import org.junit.*;
import org.junit.runner.RunWith;
import br.gov.frameworkdemoiselle.junit.DemoiselleRunner;

</businessCodeBlockContent>
<businessCodeBlockIdentification>import</businessCodeBlockIdentification>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
<intraCodeBlocks>
</intraCodeBlocks>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>EntityDAOTestClassDefinitionBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>@RunWith(DemoiselleRunner.class)
public class AlunoDAOTest {

</businessCodeBlockContent>
<businessCodeBlockIdentification>declaration</businessCodeBlockIdentification>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
<intraCodeBlocks>
</intraCodeBlocks>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>EntityDAOTestAttributesBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>	@Inject
	private AlunoDAO alunoDAO;

</businessCodeBlockContent>
<businessCodeBlockIdentification>attributes</businessCodeBlockIdentification>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
<intraCodeBlocks>
</intraCodeBlocks>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>EntityDAOTestSetupBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>	@Before
	public void before() {
		for (Aluno aluno : alunoDAO.findAll()) {
		alunoDAO.delete(aluno.getMatricula());
		}
	}

	@After
	public void after() {
		before();
	}

</businessCodeBlockContent>
<businessCodeBlockIdentification>setup</businessCodeBlockIdentification>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
<intraCodeBlocks>
</intraCodeBlocks>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>EntityDAOTestInsertBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>	@Test
	public void insert() {
		Aluno aluno = new Aluno();
		aluno.setNome("XXXXXXXXXXXXXXXXXXXX");
		aluno.setSenha("XXXXXXXXXXXXXXXXXXXX");
		alunoDAO.insert(aluno);
		List<Aluno> alunoList = alunoDAO.findAll();
		assertNotNull(alunoList);
		assertEquals(1, alunoList.size());
	}

</businessCodeBlockContent>
<businessCodeBlockIdentification>insert</businessCodeBlockIdentification>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
<intraCodeBlocks>
</intraCodeBlocks>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>EntityDAOTestUpdateBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>	@Test
	public void update() {
		Aluno aluno = new Aluno();
		aluno.setNome("XXXXXXXXXXXXXXXXXXXX");
		aluno.setSenha("XXXXXXXXXXXXXXXXXXXX");
		alunoDAO.insert(aluno);
		List<Aluno> alunoList = alunoDAO.findAll();
		assertNotNull(alunoList);
		assertTrue(alunoList.size()>0);
		Aluno beforeUpdate = alunoList.get(0);
		assertEquals("XXXXXXXXXXXXXXXXXXXX", beforeUpdate.getSenha());
		beforeUpdate.setSenha("YYYYYYYYYYYYYYYYYYYY");
		alunoDAO.update(beforeUpdate);
		alunoList = alunoDAO.findAll();
		Aluno afterUpdate = alunoList.get(0);
		assertEquals("YYYYYYYYYYYYYYYYYYYY", afterUpdate.getSenha());
	}

</businessCodeBlockContent>
<businessCodeBlockIdentification>update</businessCodeBlockIdentification>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
<intraCodeBlocks>
</intraCodeBlocks>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>EntityDAOTestDeleteBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>	@Test
	public void delete() {
		Aluno aluno = new Aluno();
		aluno.setNome("XXXXXXXXXXXXXXXXXXXX");
		aluno.setSenha("XXXXXXXXXXXXXXXXXXXX");
		alunoDAO.insert(aluno);
		List<Aluno> alunoList = alunoDAO.findAll();
		assertNotNull(alunoList);
		assertEquals(1, alunoList.size());
		alunoDAO.delete(aluno.getMatricula());
		alunoList = alunoDAO.findAll();
		assertEquals(0, alunoList.size());
	}

</businessCodeBlockContent>
<businessCodeBlockIdentification>delete</businessCodeBlockIdentification>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
<intraCodeBlocks>
</intraCodeBlocks>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>ClosingCodeBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>}</businessCodeBlockContent>
<businessCodeBlockIdentification>closing</businessCodeBlockIdentification>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
<intraCodeBlocks>
</intraCodeBlocks>
</businessCodeBlocks_item>
</businessCodeBlocks>
<businessCodeUnitSetProperty>
<businessCodeUnitSetProperty_item>
<class>com.egen.tool.business.BusinessComponentSetProperty</class>
<setPropertyEnumeration></setPropertyEnumeration>
<setPropertyKey>file</setPropertyKey>
<setPropertyValue>src/test/java/controledenotas/persistence/entity/AlunoDAOTest.java</setPropertyValue>
</businessCodeUnitSetProperty_item>
</businessCodeUnitSetProperty>
</businessCodeUnits_item>
</businessCodeUnits>
<outputParameters>
</outputParameters>
</com.egen.tool.business.BusinessComponent>
