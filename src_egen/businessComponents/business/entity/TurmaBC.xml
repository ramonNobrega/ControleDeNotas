<?xml version="1.0" encoding="UTF-8"?>
<com.egen.tool.business.BusinessComponent>
<class>com.egen.tool.business.BusinessComponent</class>
<businessComponentAlias>TurmaBC</businessComponentAlias>
<businessComponentModule>business/entity</businessComponentModule>
<businessComponentName>TurmaBC</businessComponentName>
<businessComponentMasterTemplate>EntityCrudBCTemplate</businessComponentMasterTemplate>
<variables>
<variables_item>
<class>com.egen.tool.business.BusinessVariable</class>
<businessVariableName>turma</businessVariableName>
<businessVariableDomainReference></businessVariableDomainReference>
<businessVariableDescription></businessVariableDescription>
<businessVariableInitialization></businessVariableInitialization>
<variableComponentType></variableComponentType>
<businessVariableType>@entity(controledenotas.domain.entity.Turma)</businessVariableType>
<businessVariableSetProperties>
</businessVariableSetProperties>
</variables_item>
</variables>
<businessComponentSetProperties>
</businessComponentSetProperties>
<inputParameters>
</inputParameters>
<outputParameters>
</outputParameters>
<businessCodeUnits>
<businessCodeUnits_item>
<class>com.egen.tool.business.BusinessCodeUnit</class>
<businessCodeUnitIdentification>BC</businessCodeUnitIdentification>
<businessCodeUnitContent>package controledenotas.business.entity;

import controledenotas.domain.entity.Turma;
import controledenotas.persistence.entity.TurmaDAO;
import java.util.*;
import javax.inject.Inject;
import br.gov.frameworkdemoiselle.stereotype.BusinessController;
import br.gov.frameworkdemoiselle.transaction.Transactional;
import br.gov.frameworkdemoiselle.template.DelegateCrud;

@BusinessController
public class TurmaBC extends DelegateCrud<Turma, Integer, TurmaDAO> {

	private static final long serialVersionUID = 1L;

	public List<Turma> findByExample(Turma example) {
		return getDelegate().findByExample(example);
	}

	public List<Turma> findByCriteria(java.util.Map<String, Object> parameters) {
		return getDelegate().findByCriteria(parameters);
	}

}

</businessCodeUnitContent>
<businessCodeUnitTemplate>EntityBCUnit</businessCodeUnitTemplate>
<businessCodeUnitSetProperty>
<businessCodeUnitSetProperty_item>
<class>com.egen.tool.business.BusinessComponentSetProperty</class>
<setPropertyKey>extends</setPropertyKey>
<setPropertyValue>br.gov.frameworkdemoiselle.template.DelegateCrud<[ENTITY], [ID_TYPE], [DAO]></setPropertyValue>
<setPropertyEnumeration></setPropertyEnumeration>
</businessCodeUnitSetProperty_item>
<businessCodeUnitSetProperty_item>
<class>com.egen.tool.business.BusinessComponentSetProperty</class>
<setPropertyKey>file</setPropertyKey>
<setPropertyValue>src/main/java/controledenotas/business/entity/TurmaBC.java</setPropertyValue>
<setPropertyEnumeration></setPropertyEnumeration>
</businessCodeUnitSetProperty_item>
</businessCodeUnitSetProperty>
<businessCodeBlocks>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockIdentification>package</businessCodeBlockIdentification>
<businessCodeBlockContent>package controledenotas.business.entity;

</businessCodeBlockContent>
<businessCodeBlockTemplate>PackageBlockTemplate</businessCodeBlockTemplate>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockIdentification>import</businessCodeBlockIdentification>
<businessCodeBlockContent>import controledenotas.domain.entity.Turma;
import controledenotas.persistence.entity.TurmaDAO;
import java.util.*;
import javax.inject.Inject;
import br.gov.frameworkdemoiselle.stereotype.BusinessController;
import br.gov.frameworkdemoiselle.transaction.Transactional;
import br.gov.frameworkdemoiselle.template.DelegateCrud;

</businessCodeBlockContent>
<businessCodeBlockTemplate>EntityBCImportBlockTemplate</businessCodeBlockTemplate>
<intraCodeBlocks>
<intraCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockIdentification>extraImport</businessCodeBlockIdentification>
<businessCodeBlockContent>import br.gov.frameworkdemoiselle.template.DelegateCrud;
</businessCodeBlockContent>
<businessCodeBlockTemplate></businessCodeBlockTemplate>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
<businessCodeBlockSetProperty_item>
<class>com.egen.tool.business.BusinessComponentSetProperty</class>
<setPropertyKey>position</setPropertyKey>
<setPropertyValue>custom</setPropertyValue>
<setPropertyEnumeration></setPropertyEnumeration>
</businessCodeBlockSetProperty_item>
</businessCodeBlockSetProperty>
</intraCodeBlocks_item>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockIdentification>declaration</businessCodeBlockIdentification>
<businessCodeBlockContent>@BusinessController
public class TurmaBC extends DelegateCrud<Turma, Integer, TurmaDAO> {

	private static final long serialVersionUID = 1L;

</businessCodeBlockContent>
<businessCodeBlockTemplate>EntityBCClassDefinitionBlockTemplate</businessCodeBlockTemplate>
<intraCodeBlocks>
<intraCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockIdentification>serialVersionUID</businessCodeBlockIdentification>
<businessCodeBlockContent>	private static final long serialVersionUID = 1L;

</businessCodeBlockContent>
<businessCodeBlockTemplate>SerialVersionUIDBlockTemplate</businessCodeBlockTemplate>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</intraCodeBlocks_item>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockIdentification>findByExample</businessCodeBlockIdentification>
<businessCodeBlockContent>	public List<Turma> findByExample(Turma example) {
		return getDelegate().findByExample(example);
	}

</businessCodeBlockContent>
<businessCodeBlockTemplate>EntityBCFindByExampleBlockTemplate</businessCodeBlockTemplate>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockIdentification>findByCriteria</businessCodeBlockIdentification>
<businessCodeBlockContent>	public List<Turma> findByCriteria(java.util.Map<String, Object> parameters) {
		return getDelegate().findByCriteria(parameters);
	}

</businessCodeBlockContent>
<businessCodeBlockTemplate>EntityBCFindByCriteriaBlockTemplate</businessCodeBlockTemplate>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockIdentification>closing</businessCodeBlockIdentification>
<businessCodeBlockContent>}</businessCodeBlockContent>
<businessCodeBlockTemplate>ClosingCodeBlockTemplate</businessCodeBlockTemplate>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
</businessCodeBlocks>
</businessCodeUnits_item>
<businessCodeUnits_item>
<class>com.egen.tool.business.BusinessCodeUnit</class>
<businessCodeUnitIdentification>BCTest</businessCodeUnitIdentification>
<businessCodeUnitContent>package controledenotas.business.entity;

import controledenotas.domain.entity.Turma;
import controledenotas.business.entity.TurmaBC;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import java.util.*;
import javax.inject.Inject;
import org.junit.*;
import org.junit.runner.RunWith;
import br.gov.frameworkdemoiselle.junit.DemoiselleRunner;
import controledenotas.domain.entity.Aluno;

@RunWith(DemoiselleRunner.class)
public class TurmaBCTest {

	@Inject
	private TurmaBC turmaBC;

	@Inject
	private AlunoBC alunoBC;

	@Before
	public void before() {
		for (Turma turma : turmaBC.findAll()) {
		  turmaBC.delete(turma.getCodigo());
		}
	}

	@After
	public void after() {
		before();
	}

	@Test
	public void insert() {
		Turma turma = new Turma();
		turma.setCodigo(new Integer("1"));
		turmaBC.insert(turma);
		List<Turma> turmaList = turmaBC.findAll();
		assertNotNull(turmaList);
		assertEquals(1, turmaList.size());
	}

	@Test
	public void update() {
		Turma turma = new Turma();
		turma.setCodigo(new Integer("1"));
		Aluno matriculaAluno = new Aluno();
		matriculaAluno.setMatricula(new Integer("1"));
		matriculaAluno.setNome("XXXXXXXXXXXXXXXXXXXX");
		matriculaAluno.setSenha("XXXXXXXXXXXXXXXXXXXX");
		alunoBC.insert(matriculaAluno);
		turma.setMatriculaAluno(matriculaAluno);
		turmaBC.insert(turma);
		List<Turma> turmaList = turmaBC.findAll();
		assertNotNull(turmaList);
		assertTrue(turmaList.size()>0);
		Turma beforeUpdate = turmaList.get(0);
		assertEquals(new Integer("1"), beforeUpdate.getMatriculaAluno());
		beforeUpdate.setMatriculaAluno(null);
		turmaBC.update(beforeUpdate);
		turmaList = turmaBC.findAll();
		Turma afterUpdate = turmaList.get(0);
		assertEquals(null, afterUpdate.getMatriculaAluno());
	}

	@Test
	public void delete() {
		Turma turma = new Turma();
		turma.setCodigo(new Integer("1"));
		turmaBC.insert(turma);
		List<Turma> turmaList = turmaBC.findAll();
		assertNotNull(turmaList);
		assertEquals(1, turmaList.size());
		  turmaBC.delete(turma.getCodigo());
		turmaList = turmaBC.findAll();
		assertEquals(0, turmaList.size());
	}

}

</businessCodeUnitContent>
<businessCodeUnitTemplate>EntityBCTestUnit</businessCodeUnitTemplate>
<businessCodeUnitSetProperty>
<businessCodeUnitSetProperty_item>
<class>com.egen.tool.business.BusinessComponentSetProperty</class>
<setPropertyKey>file</setPropertyKey>
<setPropertyValue>src/test/java/controledenotas/business/entity/TurmaBCTest.java</setPropertyValue>
<setPropertyEnumeration></setPropertyEnumeration>
</businessCodeUnitSetProperty_item>
</businessCodeUnitSetProperty>
<businessCodeBlocks>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockIdentification>package</businessCodeBlockIdentification>
<businessCodeBlockContent>package controledenotas.business.entity;

</businessCodeBlockContent>
<businessCodeBlockTemplate>PackageBlockTemplate</businessCodeBlockTemplate>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockIdentification>import</businessCodeBlockIdentification>
<businessCodeBlockContent>import controledenotas.domain.entity.Turma;
import controledenotas.business.entity.TurmaBC;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import java.util.*;
import javax.inject.Inject;
import org.junit.*;
import org.junit.runner.RunWith;
import br.gov.frameworkdemoiselle.junit.DemoiselleRunner;
import controledenotas.domain.entity.Aluno;

</businessCodeBlockContent>
<businessCodeBlockTemplate>EntityBCTestImportBlockTemplate</businessCodeBlockTemplate>
<intraCodeBlocks>
<intraCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockIdentification>extraImport</businessCodeBlockIdentification>
<businessCodeBlockContent>import controledenotas.domain.entity.Aluno;</businessCodeBlockContent>
<businessCodeBlockTemplate></businessCodeBlockTemplate>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
<businessCodeBlockSetProperty_item>
<class>com.egen.tool.business.BusinessComponentSetProperty</class>
<setPropertyKey>position</setPropertyKey>
<setPropertyValue>custom</setPropertyValue>
<setPropertyEnumeration></setPropertyEnumeration>
</businessCodeBlockSetProperty_item>
</businessCodeBlockSetProperty>
</intraCodeBlocks_item>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockIdentification>declaration</businessCodeBlockIdentification>
<businessCodeBlockContent>@RunWith(DemoiselleRunner.class)
public class TurmaBCTest {

</businessCodeBlockContent>
<businessCodeBlockTemplate>EntityBCTestClassDefinitionBlockTemplate</businessCodeBlockTemplate>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockIdentification>attributes</businessCodeBlockIdentification>
<businessCodeBlockContent>	@Inject
	private TurmaBC turmaBC;

	@Inject
	private AlunoBC alunoBC;

</businessCodeBlockContent>
<businessCodeBlockTemplate>EntityBCTestAttributesBlockTemplate</businessCodeBlockTemplate>
<intraCodeBlocks>
<intraCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockIdentification>extraBC</businessCodeBlockIdentification>
<businessCodeBlockContent>	@Inject
	private AlunoBC alunoBC;

</businessCodeBlockContent>
<businessCodeBlockTemplate></businessCodeBlockTemplate>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
<businessCodeBlockSetProperty_item>
<class>com.egen.tool.business.BusinessComponentSetProperty</class>
<setPropertyKey>position</setPropertyKey>
<setPropertyValue>custom</setPropertyValue>
<setPropertyEnumeration></setPropertyEnumeration>
</businessCodeBlockSetProperty_item>
</businessCodeBlockSetProperty>
</intraCodeBlocks_item>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockIdentification>setup</businessCodeBlockIdentification>
<businessCodeBlockContent>	@Before
	public void before() {
		for (Turma turma : turmaBC.findAll()) {
		  turmaBC.delete(turma.getCodigo());
		}
	}

	@After
	public void after() {
		before();
	}

</businessCodeBlockContent>
<businessCodeBlockTemplate>EntityBCTestSetupBlockTemplate</businessCodeBlockTemplate>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockIdentification>insert</businessCodeBlockIdentification>
<businessCodeBlockContent>	@Test
	public void insert() {
		Turma turma = new Turma();
		turma.setCodigo(new Integer("1"));
		turmaBC.insert(turma);
		List<Turma> turmaList = turmaBC.findAll();
		assertNotNull(turmaList);
		assertEquals(1, turmaList.size());
	}

</businessCodeBlockContent>
<businessCodeBlockTemplate>EntityBCTestInsertBlockTemplate</businessCodeBlockTemplate>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockIdentification>update</businessCodeBlockIdentification>
<businessCodeBlockContent>	@Test
	public void update() {
		Turma turma = new Turma();
		turma.setCodigo(new Integer("1"));
		Aluno matriculaAluno = new Aluno();
		matriculaAluno.setMatricula(new Integer("1"));
		matriculaAluno.setNome("XXXXXXXXXXXXXXXXXXXX");
		matriculaAluno.setSenha("XXXXXXXXXXXXXXXXXXXX");
		alunoBC.insert(matriculaAluno);
		turma.setMatriculaAluno(matriculaAluno);
		turmaBC.insert(turma);
		List<Turma> turmaList = turmaBC.findAll();
		assertNotNull(turmaList);
		assertTrue(turmaList.size()>0);
		Turma beforeUpdate = turmaList.get(0);
		assertEquals(new Integer("1"), beforeUpdate.getMatriculaAluno());
		beforeUpdate.setMatriculaAluno(null);
		turmaBC.update(beforeUpdate);
		turmaList = turmaBC.findAll();
		Turma afterUpdate = turmaList.get(0);
		assertEquals(null, afterUpdate.getMatriculaAluno());
	}

</businessCodeBlockContent>
<businessCodeBlockTemplate>EntityBCTestUpdateBlockTemplate</businessCodeBlockTemplate>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockIdentification>delete</businessCodeBlockIdentification>
<businessCodeBlockContent>	@Test
	public void delete() {
		Turma turma = new Turma();
		turma.setCodigo(new Integer("1"));
		turmaBC.insert(turma);
		List<Turma> turmaList = turmaBC.findAll();
		assertNotNull(turmaList);
		assertEquals(1, turmaList.size());
		  turmaBC.delete(turma.getCodigo());
		turmaList = turmaBC.findAll();
		assertEquals(0, turmaList.size());
	}

</businessCodeBlockContent>
<businessCodeBlockTemplate>EntityBCTestDeleteBlockTemplate</businessCodeBlockTemplate>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockIdentification>closing</businessCodeBlockIdentification>
<businessCodeBlockContent>}</businessCodeBlockContent>
<businessCodeBlockTemplate>ClosingCodeBlockTemplate</businessCodeBlockTemplate>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
</businessCodeBlocks>
</businessCodeUnits_item>
</businessCodeUnits>
</com.egen.tool.business.BusinessComponent>
