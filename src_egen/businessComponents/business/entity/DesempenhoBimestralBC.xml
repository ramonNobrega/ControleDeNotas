<?xml version="1.0" encoding="UTF-8"?>
<com.egen.tool.business.BusinessComponent>
<class>com.egen.tool.business.BusinessComponent</class>
<businessComponentMasterTemplate>EntityCrudBCTemplate</businessComponentMasterTemplate>
<businessComponentModule>business/entity</businessComponentModule>
<businessComponentAlias>DesempenhoBimestralBC</businessComponentAlias>
<businessComponentName>DesempenhoBimestralBC</businessComponentName>
<variables>
<variables_item>
<class>com.egen.tool.business.BusinessVariable</class>
<businessVariableName>desempenhoBimestral</businessVariableName>
<businessVariableType>@entity(controledenotas.domain.entity.DesempenhoBimestral)</businessVariableType>
<variableComponentType></variableComponentType>
<businessVariableDescription></businessVariableDescription>
<businessVariableDomainReference></businessVariableDomainReference>
<businessVariableInitialization></businessVariableInitialization>
<businessVariableSetProperties>
</businessVariableSetProperties>
</variables_item>
</variables>
<businessCodeUnits>
<businessCodeUnits_item>
<class>com.egen.tool.business.BusinessCodeUnit</class>
<businessCodeUnitIdentification>BC</businessCodeUnitIdentification>
<businessCodeUnitContent>package controledenotas.business.entity;

import controledenotas.domain.entity.DesempenhoBimestral;
import controledenotas.persistence.entity.DesempenhoBimestralDAO;
import java.util.*;
import javax.inject.Inject;
import br.gov.frameworkdemoiselle.stereotype.BusinessController;
import br.gov.frameworkdemoiselle.transaction.Transactional;
import br.gov.frameworkdemoiselle.template.DelegateCrud;

@BusinessController
public class DesempenhoBimestralBC extends DelegateCrud<DesempenhoBimestral, Integer, DesempenhoBimestralDAO> {

	private static final long serialVersionUID = 1L;

	public List<DesempenhoBimestral> findByExample(DesempenhoBimestral example) {
		return getDelegate().findByExample(example);
	}

	public List<DesempenhoBimestral> findByCriteria(java.util.Map<String, Object> parameters) {
		return getDelegate().findByCriteria(parameters);
	}

}

</businessCodeUnitContent>
<businessCodeUnitTemplate>EntityBCUnit</businessCodeUnitTemplate>
<businessCodeBlocks>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>PackageBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>package controledenotas.business.entity;

</businessCodeBlockContent>
<businessCodeBlockIdentification>package</businessCodeBlockIdentification>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>EntityBCImportBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>import controledenotas.domain.entity.DesempenhoBimestral;
import controledenotas.persistence.entity.DesempenhoBimestralDAO;
import java.util.*;
import javax.inject.Inject;
import br.gov.frameworkdemoiselle.stereotype.BusinessController;
import br.gov.frameworkdemoiselle.transaction.Transactional;
import br.gov.frameworkdemoiselle.template.DelegateCrud;

</businessCodeBlockContent>
<businessCodeBlockIdentification>import</businessCodeBlockIdentification>
<intraCodeBlocks>
<intraCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate></businessCodeBlockTemplate>
<businessCodeBlockContent>import br.gov.frameworkdemoiselle.template.DelegateCrud;
</businessCodeBlockContent>
<businessCodeBlockIdentification>extraImport</businessCodeBlockIdentification>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
<businessCodeBlockSetProperty_item>
<class>com.egen.tool.business.BusinessComponentSetProperty</class>
<setPropertyKey>position</setPropertyKey>
<setPropertyValue>custom</setPropertyValue>
<setPropertyEnumeration></setPropertyEnumeration>
</businessCodeBlockSetProperty_item>
</businessCodeBlockSetProperty>
</intraCodeBlocks_item>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>EntityBCClassDefinitionBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>@BusinessController
public class DesempenhoBimestralBC extends DelegateCrud<DesempenhoBimestral, Integer, DesempenhoBimestralDAO> {

	private static final long serialVersionUID = 1L;

</businessCodeBlockContent>
<businessCodeBlockIdentification>declaration</businessCodeBlockIdentification>
<intraCodeBlocks>
<intraCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>SerialVersionUIDBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>	private static final long serialVersionUID = 1L;

</businessCodeBlockContent>
<businessCodeBlockIdentification>serialVersionUID</businessCodeBlockIdentification>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</intraCodeBlocks_item>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>EntityBCFindByExampleBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>	public List<DesempenhoBimestral> findByExample(DesempenhoBimestral example) {
		return getDelegate().findByExample(example);
	}

</businessCodeBlockContent>
<businessCodeBlockIdentification>findByExample</businessCodeBlockIdentification>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>EntityBCFindByCriteriaBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>	public List<DesempenhoBimestral> findByCriteria(java.util.Map<String, Object> parameters) {
		return getDelegate().findByCriteria(parameters);
	}

</businessCodeBlockContent>
<businessCodeBlockIdentification>findByCriteria</businessCodeBlockIdentification>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>ClosingCodeBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>}</businessCodeBlockContent>
<businessCodeBlockIdentification>closing</businessCodeBlockIdentification>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
</businessCodeBlocks>
<businessCodeUnitSetProperty>
<businessCodeUnitSetProperty_item>
<class>com.egen.tool.business.BusinessComponentSetProperty</class>
<setPropertyKey>extends</setPropertyKey>
<setPropertyValue>br.gov.frameworkdemoiselle.template.DelegateCrud<[ENTITY], [ID_TYPE], [DAO]></setPropertyValue>
<setPropertyEnumeration></setPropertyEnumeration>
</businessCodeUnitSetProperty_item>
<businessCodeUnitSetProperty_item>
<class>com.egen.tool.business.BusinessComponentSetProperty</class>
<setPropertyKey>file</setPropertyKey>
<setPropertyValue>src/main/java/controledenotas/business/entity/DesempenhoBimestralBC.java</setPropertyValue>
<setPropertyEnumeration></setPropertyEnumeration>
</businessCodeUnitSetProperty_item>
</businessCodeUnitSetProperty>
</businessCodeUnits_item>
<businessCodeUnits_item>
<class>com.egen.tool.business.BusinessCodeUnit</class>
<businessCodeUnitIdentification>BCTest</businessCodeUnitIdentification>
<businessCodeUnitContent>package controledenotas.business.entity;

import controledenotas.domain.entity.DesempenhoBimestral;
import controledenotas.business.entity.DesempenhoBimestralBC;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import java.util.*;
import javax.inject.Inject;
import org.junit.*;
import org.junit.runner.RunWith;
import br.gov.frameworkdemoiselle.junit.DemoiselleRunner;

@RunWith(DemoiselleRunner.class)
public class DesempenhoBimestralBCTest {

	@Inject
	private DesempenhoBimestralBC desempenhoBimestralBC;

	@Before
	public void before() {
		for (DesempenhoBimestral desempenhoBimestral : desempenhoBimestralBC.findAll()) {
		  desempenhoBimestralBC.delete(desempenhoBimestral.getIdBimestre());
		}
	}

	@After
	public void after() {
		before();
	}

	@Test
	public void insert() {
		DesempenhoBimestral desempenhoBimestral = new DesempenhoBimestral();
		desempenhoBimestral.setNu_bim(new Integer("1"));
		desempenhoBimestralBC.insert(desempenhoBimestral);
		List<DesempenhoBimestral> desempenhoBimestralList = desempenhoBimestralBC.findAll();
		assertNotNull(desempenhoBimestralList);
		assertEquals(1, desempenhoBimestralList.size());
	}

	@Test
	public void update() {
		DesempenhoBimestral desempenhoBimestral = new DesempenhoBimestral();
		desempenhoBimestral.setNota1(new Double("1.1"));
		desempenhoBimestral.setNu_bim(new Integer("1"));
		desempenhoBimestralBC.insert(desempenhoBimestral);
		List<DesempenhoBimestral> desempenhoBimestralList = desempenhoBimestralBC.findAll();
		assertNotNull(desempenhoBimestralList);
		assertTrue(desempenhoBimestralList.size()>0);
		DesempenhoBimestral beforeUpdate = desempenhoBimestralList.get(0);
		assertEquals(new Integer("1"), beforeUpdate.getNu_bim());
		beforeUpdate.setNu_bim(new Integer("2"));
		desempenhoBimestralBC.update(beforeUpdate);
		desempenhoBimestralList = desempenhoBimestralBC.findAll();
		DesempenhoBimestral afterUpdate = desempenhoBimestralList.get(0);
		assertEquals(new Integer("2"), afterUpdate.getNu_bim());
	}

	@Test
	public void delete() {
		DesempenhoBimestral desempenhoBimestral = new DesempenhoBimestral();
		desempenhoBimestral.setNu_bim(new Integer("1"));
		desempenhoBimestralBC.insert(desempenhoBimestral);
		List<DesempenhoBimestral> desempenhoBimestralList = desempenhoBimestralBC.findAll();
		assertNotNull(desempenhoBimestralList);
		assertEquals(1, desempenhoBimestralList.size());
		  desempenhoBimestralBC.delete(desempenhoBimestral.getIdBimestre());
		desempenhoBimestralList = desempenhoBimestralBC.findAll();
		assertEquals(0, desempenhoBimestralList.size());
	}

}

</businessCodeUnitContent>
<businessCodeUnitTemplate>EntityBCTestUnit</businessCodeUnitTemplate>
<businessCodeBlocks>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>PackageBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>package controledenotas.business.entity;

</businessCodeBlockContent>
<businessCodeBlockIdentification>package</businessCodeBlockIdentification>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>EntityBCTestImportBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>import controledenotas.domain.entity.DesempenhoBimestral;
import controledenotas.business.entity.DesempenhoBimestralBC;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import java.util.*;
import javax.inject.Inject;
import org.junit.*;
import org.junit.runner.RunWith;
import br.gov.frameworkdemoiselle.junit.DemoiselleRunner;

</businessCodeBlockContent>
<businessCodeBlockIdentification>import</businessCodeBlockIdentification>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>EntityBCTestClassDefinitionBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>@RunWith(DemoiselleRunner.class)
public class DesempenhoBimestralBCTest {

</businessCodeBlockContent>
<businessCodeBlockIdentification>declaration</businessCodeBlockIdentification>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>EntityBCTestAttributesBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>	@Inject
	private DesempenhoBimestralBC desempenhoBimestralBC;

</businessCodeBlockContent>
<businessCodeBlockIdentification>attributes</businessCodeBlockIdentification>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>EntityBCTestSetupBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>	@Before
	public void before() {
		for (DesempenhoBimestral desempenhoBimestral : desempenhoBimestralBC.findAll()) {
		  desempenhoBimestralBC.delete(desempenhoBimestral.getIdBimestre());
		}
	}

	@After
	public void after() {
		before();
	}

</businessCodeBlockContent>
<businessCodeBlockIdentification>setup</businessCodeBlockIdentification>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>EntityBCTestInsertBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>	@Test
	public void insert() {
		DesempenhoBimestral desempenhoBimestral = new DesempenhoBimestral();
		desempenhoBimestral.setNu_bim(new Integer("1"));
		desempenhoBimestralBC.insert(desempenhoBimestral);
		List<DesempenhoBimestral> desempenhoBimestralList = desempenhoBimestralBC.findAll();
		assertNotNull(desempenhoBimestralList);
		assertEquals(1, desempenhoBimestralList.size());
	}

</businessCodeBlockContent>
<businessCodeBlockIdentification>insert</businessCodeBlockIdentification>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>EntityBCTestUpdateBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>	@Test
	public void update() {
		DesempenhoBimestral desempenhoBimestral = new DesempenhoBimestral();
		desempenhoBimestral.setNota1(new Double("1.1"));
		desempenhoBimestral.setNu_bim(new Integer("1"));
		desempenhoBimestralBC.insert(desempenhoBimestral);
		List<DesempenhoBimestral> desempenhoBimestralList = desempenhoBimestralBC.findAll();
		assertNotNull(desempenhoBimestralList);
		assertTrue(desempenhoBimestralList.size()>0);
		DesempenhoBimestral beforeUpdate = desempenhoBimestralList.get(0);
		assertEquals(new Integer("1"), beforeUpdate.getNu_bim());
		beforeUpdate.setNu_bim(new Integer("2"));
		desempenhoBimestralBC.update(beforeUpdate);
		desempenhoBimestralList = desempenhoBimestralBC.findAll();
		DesempenhoBimestral afterUpdate = desempenhoBimestralList.get(0);
		assertEquals(new Integer("2"), afterUpdate.getNu_bim());
	}

</businessCodeBlockContent>
<businessCodeBlockIdentification>update</businessCodeBlockIdentification>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>EntityBCTestDeleteBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>	@Test
	public void delete() {
		DesempenhoBimestral desempenhoBimestral = new DesempenhoBimestral();
		desempenhoBimestral.setNu_bim(new Integer("1"));
		desempenhoBimestralBC.insert(desempenhoBimestral);
		List<DesempenhoBimestral> desempenhoBimestralList = desempenhoBimestralBC.findAll();
		assertNotNull(desempenhoBimestralList);
		assertEquals(1, desempenhoBimestralList.size());
		  desempenhoBimestralBC.delete(desempenhoBimestral.getIdBimestre());
		desempenhoBimestralList = desempenhoBimestralBC.findAll();
		assertEquals(0, desempenhoBimestralList.size());
	}

</businessCodeBlockContent>
<businessCodeBlockIdentification>delete</businessCodeBlockIdentification>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
<businessCodeBlocks_item>
<class>com.egen.tool.business.BusinessCodeBlock</class>
<businessCodeBlockTemplate>ClosingCodeBlockTemplate</businessCodeBlockTemplate>
<businessCodeBlockContent>}</businessCodeBlockContent>
<businessCodeBlockIdentification>closing</businessCodeBlockIdentification>
<intraCodeBlocks>
</intraCodeBlocks>
<businessCodeBlockSetProperty>
</businessCodeBlockSetProperty>
</businessCodeBlocks_item>
</businessCodeBlocks>
<businessCodeUnitSetProperty>
<businessCodeUnitSetProperty_item>
<class>com.egen.tool.business.BusinessComponentSetProperty</class>
<setPropertyKey>file</setPropertyKey>
<setPropertyValue>src/test/java/controledenotas/business/entity/DesempenhoBimestralBCTest.java</setPropertyValue>
<setPropertyEnumeration></setPropertyEnumeration>
</businessCodeUnitSetProperty_item>
</businessCodeUnitSetProperty>
</businessCodeUnits_item>
</businessCodeUnits>
<outputParameters>
</outputParameters>
<inputParameters>
</inputParameters>
<businessComponentSetProperties>
</businessComponentSetProperties>
</com.egen.tool.business.BusinessComponent>
